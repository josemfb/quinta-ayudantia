import datetime as dt
import os
import locale

import openpyxl
import openpyxl.styles
import pandas as pd

import gui

locale.setlocale(locale.LC_ALL, 'es_CL.utf8')


def generate_monthly():
    # Ask user for Excel file path
    # Defaults to excel.html
    file = gui.get_file("Indica la ubicación del excel generado por Quintanet > ")
    if file == "":
        file = "excel.html"

    # If file extension is .xls change it to .html
    if file[-4:] == ".xls":
        os.rename(file, file[:-4] + ".html")
        file = file[:-4] + ".html"

    # Load table to a pandas dataframe and drop the last seven columns
    # Those columns are statistics generated by Quintanet that we'll calculate again
    df = pd.DataFrame(pd.read_html(file)[0])
    df = df.drop(columns=["Oblig.", "Asist.", "Faltas", "Licencias", "% Oblig.", "% Sin Licencia",
                          "Series de 5 Faltas"])

    # Rename columns
    df = df.rename(columns={"Orden": "Ant.", "Voluntario.1": "Cargo"})

    # Sort by seniority and update that numbers
    df = df.sort_values("Ant.")
    df = df.reset_index(drop=True)
    for i in range(len(df.index)):
        df.at[i, "Ant."] = i + 1

    # Add lines for date, hours and type
    col_names = df.columns.tolist()
    dates = ["", "", "Fecha"]
    hours = ["", "", "Hora"]
    acts = ["", "", "Acto"]
    bonus = ["", "", "ABH"]
    for col in col_names[3:]:
        dates.append(dt.date(int(col[6:10]), int(col[3:5]), int(col[0:2])))
        hours.append(dt.time(int(col[12:14]), int(col[15:17])).strftime("%H:%M"))
        acts.append(col[19:])
        bonus.append("")
    dates_dict = {col_names[i]: [dates[i]] for i in range(len(col_names))}
    dates_df = pd.DataFrame(dates_dict)
    hours_dict = {col_names[i]: [hours[i]] for i in range(len(col_names))}
    hours_df = pd.DataFrame(hours_dict)
    acts_dict = {col_names[i]: [acts[i]] for i in range(len(col_names))}
    acts_df = pd.DataFrame(acts_dict)
    bonus_dict = {col_names[i]: [bonus[i]] for i in range(len(col_names))}
    bonus_df = pd.DataFrame(bonus_dict)
    df = pd.concat([dates_df, hours_df, acts_df, bonus_df, df])

    # TODO - Review 10-6 and 10-7-3
    # TODO - Ask about act length bonus
    # TODO - Change “F” from volunteers with more than 20 years to “-”
    # TODO - Change “-” from officers to “F”, as needed
    # TODO - Calculate statistics

    # Export excel: full monthly report
    name = f"{dates[3].year}-{dates[3].month:02d}"
    name = "Cuadro Mensual - " + name + ".xlsx"
    df.to_excel(name)

    # Open output to format
    wb = openpyxl.load_workbook(name)
    ws = wb.active

    # Remove extra columns
    ws.delete_cols(1)
    ws.delete_rows(1)

    # Define border to apply later
    border_color = openpyxl.styles.Side(border_style="thin", color='000000')
    border = openpyxl.styles.Border(left=border_color, right=border_color,
                                    top=border_color, bottom=border_color)

    # Add title
    ws.title = f"{dates[3].year}-{dates[3].month:02d}"
    ws["B1"] = "5.ª Compañía"
    ws["B2"] = "Cuadro Mensual"
    month = f"{dates[3].strftime("%B")} del {dates[3].year}"[0].upper()
    month += f"{dates[3].strftime("%B")} del {dates[3].year}"[1:]
    ws["B3"] = month
    ws["B1"].font = openpyxl.styles.Font(bold=True, color="FFFFFF")
    ws["B2"].font = openpyxl.styles.Font(bold=True, color="FFFFFF")
    ws["B3"].font = openpyxl.styles.Font(bold=True, color="FFFFFF")
    ws["A1"].border = openpyxl.styles.Border(top=border_color)
    ws["B1"].border = openpyxl.styles.Border(top=border_color)
    ws["A1"].border = openpyxl.styles.Border(left=border_color)
    ws["A2"].border = openpyxl.styles.Border(left=border_color)
    ws["A3"].border = openpyxl.styles.Border(left=border_color)
    ws["A4"].border = openpyxl.styles.Border(left=border_color)
    ws["A1"].fill = openpyxl.styles.PatternFill("solid", fgColor="004000")
    ws["A2"].fill = openpyxl.styles.PatternFill("solid", fgColor="004000")
    ws["A3"].fill = openpyxl.styles.PatternFill("solid", fgColor="004000")
    ws["A4"].fill = openpyxl.styles.PatternFill("solid", fgColor="004000")
    ws["B1"].fill = openpyxl.styles.PatternFill("solid", fgColor="004000")
    ws["B2"].fill = openpyxl.styles.PatternFill("solid", fgColor="004000")
    ws["B3"].fill = openpyxl.styles.PatternFill("solid", fgColor="004000")
    ws["B4"].fill = openpyxl.styles.PatternFill("solid", fgColor="004000")

    # Format dates, hours and acts
    ws["C1"].alignment = openpyxl.styles.Alignment(horizontal="right")
    ws["C2"].alignment = openpyxl.styles.Alignment(horizontal="right")
    ws["C3"].alignment = openpyxl.styles.Alignment(horizontal="right")
    ws["C4"].alignment = openpyxl.styles.Alignment(horizontal="right")
    ws["C1"].fill = openpyxl.styles.PatternFill("solid", fgColor="C4D79B")
    ws["C2"].fill = openpyxl.styles.PatternFill("solid", fgColor="C4D79B")
    ws["C3"].fill = openpyxl.styles.PatternFill("solid", fgColor="C4D79B")
    ws["C4"].fill = openpyxl.styles.PatternFill("solid", fgColor="C4D79B")
    ws["C1"].font = openpyxl.styles.Font(bold=True)
    ws["C2"].font = openpyxl.styles.Font(bold=True)
    ws["C3"].font = openpyxl.styles.Font(bold=True)
    ws["C4"].font = openpyxl.styles.Font(bold=True)
    ws["C1"].border = border
    ws["C2"].border = border
    ws["C3"].border = border
    ws["C4"].border = border

    col = "D"
    to_check = ws[f"{col}1"]
    while to_check.value is not None:
        ws[f"{col}1"].number_format = "dd/mm"
        ws[f"{col}2"].number_format = "hh:mm"
        ws[f"{col}4"].number_format = '"(+"####" ABH)"'
        ws[f"{col}1"].alignment = openpyxl.styles.Alignment(horizontal="center")
        ws[f"{col}2"].alignment = openpyxl.styles.Alignment(horizontal="center")
        ws[f"{col}3"].alignment = openpyxl.styles.Alignment(horizontal="center")
        ws[f"{col}4"].alignment = openpyxl.styles.Alignment(horizontal="center")
        ws[f"{col}1"].font = openpyxl.styles.Font(bold=True)
        ws[f"{col}2"].font = openpyxl.styles.Font(bold=True)
        ws[f"{col}3"].font = openpyxl.styles.Font(bold=True)
        ws[f"{col}4"].font = openpyxl.styles.Font(bold=True, size=8)
        ws[f"{col}1"].border = border
        ws[f"{col}2"].border = border
        ws[f"{col}3"].border = border
        ws[f"{col}4"].border = border
        ws[f"{col}1"].fill = openpyxl.styles.PatternFill("solid", fgColor="C4D79B")
        ws[f"{col}2"].fill = openpyxl.styles.PatternFill("solid", fgColor="C4D79B")
        ws[f"{col}3"].fill = openpyxl.styles.PatternFill("solid", fgColor="C4D79B")
        ws[f"{col}4"].fill = openpyxl.styles.PatternFill("solid", fgColor="C4D79B")
        ws.column_dimensions[col].width = 7
        if col[-1:] == "Z":
            if len(col) == 1:
                col = "AA"
            else:
                col = f"{chr(ord(col[0]) + 1)}A"
        else:
            if len(col) == 1:
                col = f"{chr(ord(col[0]) + 1)}"
            else:
                col = f"{col[0]}{chr(ord(col[-1:]) + 1)}"
        to_check = ws[f"{col}1"]

    # Format names and attendance
    ws.column_dimensions["A"].width = 5
    ws.column_dimensions["B"].width = 32
    ws.column_dimensions["C"].width = 20

    row = 5
    while ws[f"A{row}"].value is not None:
        ws.row_dimensions[row].height = 30
        ws[f"B{row}"].font = openpyxl.styles.Font(bold=True)
        ws[f"A{row}"].alignment = openpyxl.styles.Alignment(horizontal="center", vertical="center")
        ws[f"B{row}"].alignment = openpyxl.styles.Alignment(vertical="center", wrap_text=True)
        ws[f"C{row}"].alignment = openpyxl.styles.Alignment(vertical="center", wrap_text=True)
        ws[f"A{row}"].border = border
        ws[f"B{row}"].border = border
        ws[f"C{row}"].border = border

        col = "D"
        to_check = ws[f"{col}{row}"]
        while to_check.value is not None:
            to_check.alignment = openpyxl.styles.Alignment(horizontal="center", vertical="center")
            to_check.border = border
            if to_check.value == "A":
                to_check.font = openpyxl.styles.Font(color="004000")
                to_check.fill = openpyxl.styles.PatternFill("solid", fgColor="C4D79B")
            elif to_check.value == "F":
                to_check.font = openpyxl.styles.Font(color="974706")
                to_check.fill = openpyxl.styles.PatternFill("solid", fgColor="FABF8F")
            elif to_check.value == "L":
                to_check.font = openpyxl.styles.Font(color="244062")
                to_check.fill = openpyxl.styles.PatternFill("solid", fgColor="95B3D7")
            elif to_check.value == "S" or to_check.value == "R":
                to_check.font = openpyxl.styles.Font(color="0D0D0D")
                to_check.fill = openpyxl.styles.PatternFill("solid", fgColor="A6A6A6")

            if col[-1:] == "Z":
                if len(col) == 1:
                    col = "AA"
                else:
                    col = f"{chr(ord(col[0]) + 1)}A"
            else:
                if len(col) == 1:
                    col = f"{chr(ord(col[0]) + 1)}"
                else:
                    col = f"{col[0]}{chr(ord(col[-1:]) + 1)}"
            to_check = ws[f"{col}{row}"]
        row += 1

    # Save formatted excel
    ws.freeze_panes = ws["D5"]
    wb.save(name)

    # TODO - Export excel: simple report
    # TODO - Format and color code simple report


def generate_quarterly():
    # TODO - Generate report with mandatory acts of the quarter
    ...


def settings():
    # TODO - Review and create new types of acts
    # TODO - Select which acts are mandatory
    # TODO - Select last volunteer with 20 years of service
    ...


if __name__ == "__main__":
    '''
    options = ["Reportes mensuales (cuadro y parte)",
               "Reportes trimestrales (obligatorios y porcentajes)",
               "Configuración"]
    while True:
        match gui.menu(options):
            case 1:
                generate_monthly()
                break
            case 2:
                generate_quarterly()
                break
            case 3:
                settings()
            case _:
                print("Not an option")
    '''
    generate_monthly()
